scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col=c(col1,col2))
}
X<-DSV.preds
SI.traits=NULL
weights=NULL
model="MT Ensemble preds"
col1=rgb(0,0,1,0.8,maxColorValue = 1)
col2=rgb(0,0,1,0.8,maxColorValue = 1)
preds<-X$model
preds
model
names(X)
preds<-X[[which(names(X)==model)]]
preds
MT.model="RF MT Ens"
sub.model="RF MT Ens"
preds<-lapply(preds,function(x) x[,colnames(x)==sub.model])
preds
preds<-unlist(lapply(preds,function(x) x[,colnames(x)==sub.model]))
lapply(preds,function(x) x[,colnames(x)==sub.model])
sub.model
preds<-X[[which(names(X)==model)]]
preds<-unlist(lapply(preds,function(x) x[,colnames(x)==sub.model]))
preds
library(lme4)
library(viridis)
library(missForest)
library(parallel)
library(doParallel)
library(rrBLUP)
library(randomForest)
library(glmnet)
library(data.table)
library(gbm)
library(xgboost)
library(matrixcalc)
library(BGLR)
preds<-X[[which(names(X)==model)]]
preds<-cbind(lapply(preds,function(x) x[,colnames(x)==sub.model]))
preds
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlistlapply(preds,function(x) x[,colnames(x)==sub.model]),nrow = nrow(x),ncol = ncol(x))
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(x),ncol = ncol(x))
preds<-X[[which(names(X)==model)]]
preds[[1]]
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = ncol(preds[[1]]))
preds
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = ncol(preds[[1]]),
dimnames = c(rownames(preds[[1]]),colnames(preds[[1]])))
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = ncol(preds[[1]]),
dimnames = c(rownames(preds[[1]]),colnames(preds[[1]])))
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = ncol(preds[[1]]),
dimnames = list(rownames(preds[[1]]),colnames(preds[[1]])))
preds
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col=c(col1,col2))
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
preds
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
SI.traits
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
preds
SI.traits
SI.traits=NULL
weights=NULL
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col=c(col1,col2))
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0,0,1,0.7,maxColorValue = 1),
col2=rgb(0,1,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col=c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.2,0,0.8,0.7,maxColorValue = 1),
col2=rgb(0.2,0.8,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col=c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.2,0,0.8,0.7,maxColorValue = 1),
col2=rgb(0.3,0.8,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col=c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.2,0,0.8,0.7,maxColorValue = 1),
col2=rgb(0.3,0.7,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col=c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.2,0,0.8,0.7,maxColorValue = 1),
col2=rgb(1,0.7,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col =c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.2,0,0.8,0.7,maxColorValue = 1),
col2=rgb(1,0.2,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col =c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.2,0,0.8,0.7,maxColorValue = 1),
col2=rgb(1,0.1,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col =c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.2,0,0.8,0.7,maxColorValue = 1),
col2=rgb(1,0,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col =c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.1,0.1,0.8,0.7,maxColorValue = 1),
col2=rgb(1,0,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col =c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
plot.MT.PC.SI<-function(X,
SI.traits=NULL,
weights=NULL,
model="MT Ensemble preds",
sub.model="RF MT Ens",
col1=rgb(0.1,0.2,0.8,0.7,maxColorValue = 1),
col2=rgb(1,0,0,0.6,maxColorValue = 1)){
preds<-X[[which(names(X)==model)]]
preds<-matrix(unlist(lapply(preds,function(x) x[,colnames(x)==sub.model])),nrow = nrow(preds[[1]]),ncol = length(preds),
dimnames = list(rownames(preds[[1]]),names(preds)))
if(is.null(SI.traits)){
SI.traits<-colnames(preds)
}
if(is.null(weights)){
weights<-rep(1,length(SI.traits))
}
if (!length(SI.traits)==length(weights)) {
print("SI.traits and weights vectors are not the same length...")
}
weights.mat<-matrix(rep(weights,nrow(preds)),nrow=nrow(preds),ncol = length(SI.traits),byrow = T)
scaled<-scale(preds[,SI.traits])*weights.mat
biplot(prcomp(scaled),cex=c(0.7,1),col =c(col1,col2))
}
plot.MT.PC.SI(X = DSV.preds)
New.Genos<-QCd.markers[groups$DSV319,]
Genos.train<-QCd.markers[!rownames(QCd.markers)%in%groups$DSV319,]
Phenos<-all.trait.blups[rownames(Genos.train),8:12]
library(lme4)
library(viridis)
library(missForest)
library(parallel)
library(doParallel)
library(rrBLUP)
library(randomForest)
library(glmnet)
library(data.table)
library(gbm)
library(xgboost)
library(matrixcalc)
library(BGLR)
setwd("Y:/PhD/DSV big data")
load("Y:/PhD/DSV big data/DSV.mega.dataset.RData")
MAGIC.genos<-t(MAGIC.genos)
incommon<-colnames(all.markers)[colnames(all.markers)%in%colnames(MAGIC.genos)]
combined.markers<-rbind.data.frame(all.markers[,incommon],MAGIC.genos[,incommon])
#Subset marker data thats not in dataset----
combined.markers<-combined.markers[rownames(combined.markers)%in%levels(data$Variety),]
marker.QC<-function(marker.mat,#NxM marker matrix with row names and column names. Markers coded as 0,1,2 for hom, het,hom.
impute=T,
cutoff=0.8, #correlation threshold for pruning. Numeric between 0 and 1. Default is 0.8
min.maf=0.05, #Minimum minor allele frequency to keep. Numeric between 0 and 0.5. Default is 0.05
max.NAs=0.1, #Maximum proportion of NA missing data Numeric between 0 and 1. Default is 0.1
verbose=T) #Logical whether to print progress. Default is TRUE.
{
if(verbose==T){if(min.maf>0.2){print("High MAF!")}}
if(verbose==T){if(max.NAs>0.3){print("High max NAs!")}}
if(verbose==T){print("Removing high NA markers")}
marker.mat[marker.mat==1]<-NA
missing<-(apply(marker.mat,2,FUN = function(x) sum(is.na(x))))/nrow(marker.mat) #calculate NA freq
marker.mat<-marker.mat[,!missing>max.NAs] #remove markers with >10% NAs
if(verbose==T){print("Calculating marker correlations....")}
c<-cor(marker.mat,use="pairwise.complete.obs")#Calculate marker cors
if(impute==T){
if(verbose==T){print("Imputing missing data")}
imputed<-marker.mat
rest.of.data<-marker.mat
median.impute<-function(x){
x[is.na(x)]<-median(na.omit(x))
return(x)
}
rest.of.data<-cbind(apply(rest.of.data,2,FUN = median.impute))
for(i in 1:ncol(marker.mat)){
rest.of.data.sub<-rest.of.data[,names(abs(c[,i])[order(abs(c[,i]),decreasing=T)[1:100]])]
rest.of.data.sub<-rest.of.data.sub[,!colnames(rest.of.data.sub)==colnames(marker.mat)[i]]
isna<-is.na(marker.mat[,i])
if(sum(isna)>0){
rfmod<-randomForest(x = rest.of.data.sub[!isna,],y = as.factor(marker.mat[!isna,i]),ntree = 20,importance = T)
imputed[isna,i]<-as.numeric(as.character(predict(rfmod,newdata = rest.of.data.sub[isna,])))
}
if(isTRUE(!round((1:ncol(marker.mat)/ncol(marker.mat))*100)[i]==round((1:ncol(marker.mat)/ncol(marker.mat))*100)[i-1])){
if(verbose==T){cat("|",sep="")}
}
}
}
if(verbose==T){print("Removing low MAF markers")}
maf<-apply(imputed,2,function(x) min(sum(na.omit(x==2)),sum(na.omit(x==0)))/nrow(imputed)) #Calculate MAF
all.markers.mafrm<-imputed[,!maf<min.maf] #Remove MAF<0.05 markers
if(cutoff<1){
if(verbose==T){print("Pruning:")}
to.remove<-c()
c<-c[colnames(all.markers.mafrm),colnames(all.markers.mafrm)]
for(i in 1:ncol(all.markers.mafrm)){
if(!colnames(c)[i]%in%to.remove){
linked<-rownames(c)[!rownames(c)%in%to.remove][abs(c[!rownames(c)%in%to.remove,i])>cutoff]
to.remove<-c(to.remove,linked[!linked==colnames(c)[i]])
}
if(isTRUE(!round((1:ncol(c)/ncol(c))*100)[i]==round((1:ncol(c)/ncol(c))*100)[i-1])){
if(verbose==T){cat("|",sep="")}
}
}
to.remove<-unique(to.remove)
pruned<-all.markers.mafrm[,!colnames(all.markers.mafrm)%in%to.remove]
out<-pruned
}else{
out<-all.markers.mafrm
}
return(out)
}
QCd.markers<-marker.QC(marker.mat = combined.markers)
#Subset data that has no marker data----
data<-data[data$Variety%in%rownames(QCd.markers),]
traits<-colnames(data)[5:ncol(data)]
#Get blups for each trait----
all.trait.blups<-matrix(NA,nrow = length(unique(data$Variety)),ncol = length(traits),dimnames = list(unique(data$Variety),traits))
for (i in 1:length(traits)) {
cat("|",i)
no.na.trait<-!is.na(data[,traits[i]])
if(length(unique(data$Env[no.na.trait]))>1){
lmod<-lmer(data[no.na.trait,traits[i]]~1+(1|data$Env[no.na.trait])+(1|data$Variety[no.na.trait]))
blup<-coef(lmod)$`data$Variety[no.na.trait]`
all.trait.blups[,i]<-blup[rownames(all.trait.blups),]
}else{
blup<-data[no.na.trait,traits[i]]
names(blup)<-data$Variety[no.na.trait]
all.trait.blups[,i]<-blup[rownames(all.trait.blups)]
}
}
all.trait.blups<-as.data.frame(all.trait.blups)
groups<-list()
#groups$MAGIC<-rownames(all.trait.blups)[grep("MEL",substr(rownames(all.trait.blups),start = 1,stop = 3))]
groups$DSV967<-rownames(all.trait.blups)[grep("967",substr(rownames(all.trait.blups),start = 1,stop = 3))]
groups$DSV967<-rownames(all.trait.blups)[grep("80",substr(rownames(all.trait.blups),start = 1,stop = 2))]
groups$DSV318<-rownames(all.trait.blups)[grep("318",substr(rownames(all.trait.blups),start = 1,stop = 3))]
groups$DSV319<-rownames(all.trait.blups)[grep("319",substr(rownames(all.trait.blups),start = 1,stop = 3))]
groups$DSV320<-rownames(all.trait.blups)[grep("320",substr(rownames(all.trait.blups),start = 1,stop = 3))]
groups$DSV321<-rownames(all.trait.blups)[grep("321",substr(rownames(all.trait.blups),start = 1,stop = 3))]
DSV.preds
getwd()
setwd("Y:/Fun functions/MTens Package/MTensGS")
roxygenise()
roxygenise()
roxygenise()
getwd()
setwd("Y:/Fun functions/MTens Package")
roxygenise()
setwd("Y:/Fun functions/MTens Package/MTensGS")
roxygenise()
roxygenise()
load_all(".")
use_mit_license()
use_gpl3_license()
load_all()
roxygenise()
roxygenise
document()
document()
devtools::document()
devtools::document()
devtools::document()
load_all()
m(list = c("marker.QC"))
rm(list = c("marker.QC"))
devtools::document()
install("MTensGS")
getwd()
install("MTensGS")
document()
create("MTensGS")
roxygenise()
roxygenise()
document()
install("MTensGS")
getwd()
