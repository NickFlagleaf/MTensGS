fitness <- function(params) {
xsubsub<-X[!is.na(Y),]
ysubsub<-Y[!is.na(Y)]
rfcvs<-split(sample(c(1:nrow(xsubsub))),1:8)
cv.preds<-c()
for(cv in 1:length(rfcvs)){
rfmod<-ranger::ranger(x=xsubsub[-rfcvs[[cv]],],y=ysubsub[-rfcvs[[cv]]],num.tree=300,mtry = floor(ncol(xsubsub)*params[1])
,min.node.size = floor(params[2]),oob.error = F)
cv.preds[rfcvs[[cv]]]<-predict(rfmod,data=xsubsub[rfcvs[[cv]],])$predictions
}
cor(cv.preds,ysubsub)
}
GA <- GA::ga("real-valued",lower = c(0.05,2),upper = c(0.95,floor(nrow(X)*0.2)),
fitness = fitness, maxiter = 20,keepBest = T,popSize = 10,elitism = 5,
parallel = n.cores,monitor = F)
opt.params<- GA@solution
rf.fit<-ranger::ranger(x=X[!is.na(Y),],y=Y[!is.na(Y)],num.tree=400,max.depth=NULL
,min.node.size=floor(opt.params[1,2]),mtry = floor(ncol(X)*opt.params[1,1]),oob.error = F)
MTens.prediction<-predict(rf.fit,data=newX)$predictions
names(MTens.prediction)<-row.names(newX)
all.trait.out.of.test.fold.preds[[t]]<-cbind(all.trait.out.of.test.fold.preds[[t]],"MT ensemble"=MTens.prediction)
} #End of traits loop
base.preds<-array(NA,dim=c(length(rownames(New.Genos)),length(base.models)+1,length(traits))
,dimnames=list(rownames(New.Genos),c(base.models,"MT.ensemble"),traits))
for(t in 1:length(traits)){
base.preds[rownames(all.trait.out.of.test.fold.preds[[t]]),,t]<-all.trait.out.of.test.fold.preds[[t]]
}
all.out<-list("All new predictions"=base.preds,
"Base models"=base.models,
"Traits"=traits)
if(verbose>1){print("FINISHED!!!")}
if(verbose>1){print(Sys.time()-run.start.time)}
return(all.out)
}
library(MTensGS)
#' data(TGdata)
#' QCd.markers<-marker.QC(marker.mat = TGgenos)
#' MTens.CV.results<-CV.MTens(Genos = QCd.markers,Phenos = TGphenos
#'                            ,base.models = c("rrblup","LASSO")
#'                            ,n.CV.rounds = 1,n.valid.rounds=1)
#'
#'
#'
#' @export
#'
CV.MTens<-function(Genos,Phenos,
base.models=c("rrblup","EGBLUP","RKHS","LASSO","RF","GBM"),
n.test.folds=10,
n.valid.folds=8,
n.CV.rounds=2,
n.valid.rounds=3,
CV.groups=NULL,
n.cores=NULL,
rf.ntrees=400,
gbm.ntrees=300,
bglr.saveAt=NULL,
verbose=2){
library(foreach)
run.start.time<-Sys.time()
if(verbose>0){
if(length(rownames(Genos)[!rownames(Genos)%in%rownames(Phenos)])>0){
print("Lines in Genos but not in Phenos:")
print(rownames(Genos)[!rownames(Genos)%in%rownames(Phenos)])}
if(length(rownames(Phenos)[!rownames(Phenos)%in%rownames(Genos)])>0){
print("Lines in Phenos but not in Genos:")
print(rownames(Phenos)[!rownames(Phenos)%in%rownames(Genos)])}
invalid.base.models<-base.models[!base.models %in% c("rrblup","EGBLUP","RKHS","LASSO","RF","GBM")]
if (length(invalid.base.models)>0) {
print("Invalid base model names!  :")
print(invalid.base.models)
print(c("Options include:",c("rrblup","EGBLUP","RKHS","LASSO","RF","GBM")))
}
}
if(is.null(n.cores)){
n.cores<-parallel::detectCores()
}
if(is.null(bglr.saveAt)){
bglr.saveAt<-tempdir()
}
Genos<-as.matrix(Genos[rownames(Genos)%in%rownames(Phenos),])
Phenos<-as.data.frame(Phenos[rownames(Phenos)%in%rownames(Genos),])
if(!is.null(CV.groups)){
n.CV.rounds<-1
n.test.folds<-length(CV.groups)
}
all.CV.rounds<-list()
traits<-colnames(Phenos)
for(r in 1:n.CV.rounds){
if(verbose>0){print(paste("Starting test CV round",r))}
if(is.null(CV.groups)){
test.folds<-split(sample(1:nrow(Phenos)),1:n.test.folds)#make folds
}else{
test.folds<-lapply(CV.groups,function(x) which(rownames(Phenos)%in%x) )
}
all.out.of.fold.preds<-list()
for (i in 1:n.test.folds) {
all.trait.out.of.test.fold.preds<-list()
all.trait.out.of.valid.fold.preds<-list()
valid.folds<-list()
for (vr in 1:n.valid.rounds) {
valid.folds[[vr]]<-split(sample(c(1:nrow(Phenos))[!1:nrow(Phenos)%in%test.folds[[i]]]),1:n.valid.folds)#make folds
}
traits<-colnames(Phenos)
for (t in 1:length(traits)) {
if(verbose>0){print(paste("Starting cross validation training for",traits[t]))}
#CV each ST model for ensemble base.models----
all.STmod.out.of.valid.fold.preds<-array(NA,dim = c(nrow(Phenos[-test.folds[[i]],]),length(base.models),n.valid.rounds),
dimnames = list(rownames(Phenos[-test.folds[[i]],]),base.models,1:n.valid.rounds))
valid.start<-Sys.time()
validation.grid<-expand.grid(1:n.valid.folds,1:n.valid.rounds)
file.remove("Validation folds log.txt")
cl <- parallel::makeCluster(n.cores,outfile="Validation folds log.txt")
doParallel::registerDoParallel(cl)
validation.out<-foreach::foreach(v=1:nrow(validation.grid),.combine = list,.errorhandling="stop",.verbose = F,.multicombine = T) %dopar% {
valid.names<-rownames(Phenos)[valid.folds[[validation.grid[v,2]]][[validation.grid[v,1]]]]
valid.fold.preds<-matrix(data=NA,nrow=length(valid.names),ncol=length(base.models),dimnames = list(valid.names,base.models))
if(verbose>0){print(paste("========Starting",traits[t],"validation fold",validation.grid[v,1],"validation round",validation.grid[v,2]," test fold",i," CV round",r,"=========="))}
#RRBLUP----
if("rrblup"%in%base.models){
start<-Sys.time()
Phenos.na<-Phenos
Phenos.na[test.folds[[i]],]<-NA
Phenos.na[valid.names,]<-NA
Phenos.na<-cbind.data.frame(rownames(Phenos.na),Phenos.na)
colnames(Phenos.na)[1]<-"line"
A<-rrBLUP::A.mat(Genos)
A<-A[rownames(Phenos)[-test.folds[[i]]],rownames(Phenos)[-test.folds[[i]]]]
gblup.model<-rrBLUP::kin.blup(data=Phenos.na,pheno = traits[t],geno = "line",K = A)
valid.fold.preds[valid.names,"rrblup"]<-gblup.model$pred[rownames(valid.fold.preds)][valid.names]
if(verbose>1){print("running rrBLUP")}
if(verbose>1){print(Sys.time()-start)}
}
#EGBLUP----
if("EGBLUP"%in%base.models){
start<-Sys.time()
Phenos.na<-Phenos[-test.folds[[i]],]
Phenos.na<-Phenos.na[!is.na(Phenos.na[,t])|rownames(Phenos.na)%in%valid.names,]#Remove lines with na but not in validation fold
Phenos.na[valid.names,]<-NA
A <- rrBLUP::A.mat(Genos[rownames(Phenos.na),])
H<-matrixcalc::hadamard.prod(A,A)
Phenos.na<-Phenos.na[rownames(A),]
ETA<-list(list(K=A,model="RKHS"),list(K=H,model="RKHS"))
fm<-BGLR::BGLR(y =Phenos.na[,t],ETA = ETA,nIter=3000,burnIn=500,df0=5,S0=2,verbose = F,saveAt = bglr.saveAt)
fm.preds<-fm$yHat
names(fm.preds)<-rownames(A)
valid.fold.preds[valid.names,"EGBLUP"]<-fm.preds[rownames(valid.fold.preds)][valid.names]
if(verbose>1){print("running EGBLUP")}
if(verbose>1){print(Sys.time()-start)}
}
#RF----
if("RF"%in%base.models){
start<-Sys.time()
X<-as.matrix(Genos[rownames(Phenos)[-test.folds[[i]]],])[!is.na(Phenos[-test.folds[[i]],t]),]
X<-X[!rownames(X)%in%valid.names,]
rf.fit<-ranger::ranger(x=X,y=Phenos[rownames(X),t],num.tree=rf.ntrees,max.depth=NULL
,min.node.size=15,mtry = round(ncol(X)/3),num.threads = 1)
valid.fold.preds[valid.names,"RF"]<-predict(rf.fit,data = as.matrix(Genos[valid.names,]))$predictions
if(verbose>1){print("running RF")}
if(verbose>1){print(Sys.time()-start)}
}
#GBM----
if("GBM"%in%base.models){
start<-Sys.time()
X<-as.matrix(Genos[rownames(Phenos)[-test.folds[[i]]],])[!is.na(Phenos[-test.folds[[i]],t]),]
X<-X[!rownames(X)%in%valid.names,]
X<-X[sample(1:nrow(X)),]
Y<-Phenos[rownames(X),t]
gbmdata<-cbind.data.frame(Y,X)
gbm.tune<-expand.grid(depth=c(2:8),
bag.fraction=c(0.4,0.5,0.6,0.7,0.8,0.9),
minobs=round(seq(2,nrow(X)*0.05,length.out=5)))
gbm.tune<-gbm.tune[sample(1:nrow(gbm.tune)),]
gbm.tune.error<-c()
if(verbose>1){print("GBM param tune")}
for (h in 1:10){
if(verbose>1){cat("|",sep="")}
gbm.fit<-gbm::gbm(Y~.,data = gbmdata,distribution = "gaussian",train.fraction = 0.8
,interaction.depth = gbm.tune$depth[h],bag.fraction =gbm.tune$bag.fraction[h],
n.minobsinnode = gbm.tune$minobs[h],n.trees = 50,shrinkage = 0.2,verbose = F,n.cores=1)
gbm.tune.error[h]<-min(gbm.fit$valid.error)
}
for (h in 1:5){
if(verbose>1){cat("|",sep="")}
tune.model<-randomForest::randomForest(x=gbm.tune[which(!is.na(gbm.tune.error)),],y=gbm.tune.error[!is.na(gbm.tune.error)],ntree=500,importance=F)
full.error.preds<-predict(tune.model,newdata = gbm.tune)
full.error.preds[which(!is.na(gbm.tune.error))]<-NA
next.index<-which.min(full.error.preds)
gbm.fit<-gbm::gbm(Y~.,data = gbmdata,distribution = "gaussian",train.fraction = 0.8
,interaction.depth = gbm.tune$depth[next.index],bag.fraction =gbm.tune$bag.fraction[next.index],
n.minobsinnode = gbm.tune$minobs[next.index],n.trees = 50,shrinkage = 0.2,verbose = F,n.cores=1)
gbm.tune.error[next.index]<-min(gbm.fit$valid.error)
}
opt.params<-gbm.tune[which.min(gbm.tune.error),]
gbm.fit<-gbm::gbm(Y~.,data = gbmdata,cv.folds = 5,distribution = "gaussian",interaction.depth = opt.params$depth,n.minobsinnode = opt.params$minobs,
n.trees = gbm.ntrees,shrinkage = 0.03,verbose = F,n.cores=1)
opt.tree<-gbm::gbm.perf(gbm.fit,plot.it = F,method = "cv")
if(verbose>1){print(paste("GBM opt run tree no. =",opt.tree))}
valid.fold.preds[valid.names,"GBM"]<-gbm::predict.gbm(gbm.fit,n.trees = opt.tree,newdata = as.data.frame(Genos[valid.names,]))
if(verbose>1){print("running GBM")}
if(verbose>1){print(Sys.time()-start)}
}
#LASSO----
if("LASSO"%in%base.models){
start<-Sys.time()
X<-as.matrix(Genos[rownames(Phenos)[-test.folds[[i]]],])[!is.na(Phenos[-test.folds[[i]],t]),]
X<-X[!rownames(X)%in%valid.names,]
cv.fit<-glmnet::cv.glmnet(x=X,y=Phenos[rownames(X),t],nfolds = 8,lambda = seq(0.000001,0.9,length.out=50)^4)
lasso.fit<-glmnet::glmnet(x=X,y=Phenos[rownames(X),t],lambda = cv.fit$lambda.min,alpha = 1)
valid.fold.preds[valid.names,"LASSO"]<-predict(lasso.fit,newx = as.matrix(Genos[valid.names,]))
if(verbose>1){print("running LASSO")}
if(verbose>1){print(Sys.time()-start)}
}
#RKHS----
if("RKHS"%in%base.models){
start<-Sys.time()
Phenos.na<-Phenos[-test.folds[[i]],]
Phenos.na<-Phenos.na[!is.na(Phenos.na[,t])|rownames(Phenos.na)%in%valid.names,]#Remove lines with na but not in validation fold
Phenos.na[valid.names,]<-NA
Genos.sub<-Genos[rownames(Phenos)[-test.folds[[i]]],]
D<-as.matrix(dist(Genos.sub,method="euclidean"))^2 #Compute Gaussian kernel
D<-D/mean(D)
h<-0.5*c(1/5,1,5)
ETA<-list(list(K=exp(-h[1]*D),model='RKHS'),
list(K=exp(-h[2]*D),model='RKHS'),
list(K=exp(-h[3]*D),model='RKHS'))
Phenos.na<-Phenos.na[rownames(D),]
fm<-BGLR::BGLR(y =Phenos.na[,t],ETA = ETA,nIter=3000,burnIn=500,df0=5,S0=2,verbose = F,saveAt = bglr.saveAt)
fm.preds<-fm$yHat
names(fm.preds)<-rownames(D)
valid.fold.preds[valid.names,"RKHS"]<-fm.preds[rownames(valid.fold.preds)]
if(verbose>1){print("running RKHS")}
if(verbose>1){print(Sys.time()-start)}
}
return(valid.fold.preds)
}
parallel::stopCluster(cl)
doParallel::stopImplicitCluster()
if(verbose>0){print(paste("Validation for rounds for",traits[t]))}
if(verbose>0){print(Sys.time()-valid.start)}
for (v in 1:length(validation.out)) {
all.STmod.out.of.valid.fold.preds[rownames(validation.out[[v]]),,validation.grid[v,2]]<-validation.out[[v]]
}
all.STmod.out.of.valid.fold.preds<-apply(all.STmod.out.of.valid.fold.preds,1:2,FUN = function(x) mean(na.omit(x))) #Average accross validaton rounds
base.model.valid.rs<-apply(all.STmod.out.of.valid.fold.preds,2,
function(x) cor(x,Phenos[rownames(all.STmod.out.of.valid.fold.preds),t],use="pairwise.complete.obs"))
if(verbose>1){print("Out-of-validation fold prediction accuracies:")}
if(verbose>1){print(round(base.model.valid.rs,2))}
all.trait.out.of.valid.fold.preds[[t]]<-all.STmod.out.of.valid.fold.preds
#Run each ST Gmodel on full training data----
all.STmod.out.of.test.fold.preds<-matrix(NA,nrow = nrow(Phenos[test.folds[[i]],]),ncol=length(base.models),
dimnames = list(rownames(Phenos[test.folds[[i]],]),base.models))
{
if(verbose>0){print(paste("========Starting",traits[t]," test fold",i," CV round",r,"====Full traing set fitting=========="))}
#RRBLUP----
if("rrblup"%in%base.models){
start<-Sys.time()
Phenos.na<-Phenos
Phenos.na[test.folds[[i]],]<-NA
Phenos.na<-cbind.data.frame(rownames(Phenos.na),Phenos.na)
colnames(Phenos.na)[1]<-"line"
A <-rrBLUP::A.mat(Genos)
gblup.model<-rrBLUP::kin.blup(data=Phenos.na,pheno = traits[t],geno = "line",K = A)
all.STmod.out.of.test.fold.preds[,"rrblup"]<-gblup.model$pred[rownames(all.STmod.out.of.test.fold.preds)]
if(verbose>1){print("running rrBLUP")}
if(verbose>1){print(Sys.time()-start)}
}
#EGBLUP----
if("EGBLUP"%in%base.models){
start<-Sys.time()
Phenos.na<-Phenos
Phenos.na<-Phenos.na[!is.na(Phenos.na[,t]),] #Remove NA rows
Phenos.na[rownames(Phenos)[test.folds[[i]]],]<-NA #Make test folds genos NA
A <- rrBLUP::A.mat(Genos)
H<-matrixcalc::hadamard.prod(A,A)
Phenos.na<-Phenos.na[rownames(A),]
ETA<-list(list(K=A,model="RKHS"),list(K=H,model="RKHS"))
fm<-BGLR::BGLR(y =Phenos.na[,t],ETA = ETA,nIter=5000,burnIn=1000,df0=5,S0=2,verbose = F,saveAt = bglr.saveAt)
fm.preds<-fm$yHat
names(fm.preds)<-rownames(A)
all.STmod.out.of.test.fold.preds[,"EGBLUP"]<-fm.preds[rownames(all.STmod.out.of.test.fold.preds)]
if(verbose>1){print("running EGBLUP")}
if(verbose>1){print(Sys.time()-start)}
}
#RF----
if("RF"%in%base.models){
start<-Sys.time()
X<-as.matrix(Genos[rownames(Phenos)[-test.folds[[i]]],])[!is.na(Phenos[-test.folds[[i]],t]),]
rf.fit<-ranger::ranger(x=X,y=Phenos[rownames(X),t],num.tree=rf.ntrees,max.depth=NULL
,min.node.size=15,mtry = round(ncol(X)/3),num.threads = n.cores)
all.STmod.out.of.test.fold.preds[,"RF"]<-predict(rf.fit,data = as.matrix(Genos[rownames(all.STmod.out.of.test.fold.preds),]))$predictions
if(verbose>1){print("running RF")}
if(verbose>1){print(Sys.time()-start)}
}
#GBM----
if("GBM"%in%base.models){
start<-Sys.time()
X<-as.matrix(Genos[rownames(Phenos)[-test.folds[[i]]],])[!is.na(Phenos[-test.folds[[i]],t]),]
X<-X[sample(1:nrow(X)),]
Y<-Phenos[rownames(X),t]
gbmdata<-cbind.data.frame(Y,X)
gbm.tune<-expand.grid(depth=c(2:6),bag.fraction=c(0.4,0.5,0.6,0.7,0.8),minobs=round(seq(2,nrow(X)*0.05,length.out=5)))
gbm.tune<-gbm.tune[sample(1:nrow(gbm.tune)),]
gbm.tune.error<-c()
if(verbose>1){print("GBM param tune")}
for (h in 1:10){
if(verbose>1){cat("|",sep="")}
gbm.fit<-gbm::gbm(Y~.,data = gbmdata,distribution = "gaussian",train.fraction = 0.8
,interaction.depth = gbm.tune$depth[h],bag.fraction =gbm.tune$bag.fraction[h],
n.minobsinnode = gbm.tune$minobs[h],n.trees = 50,shrinkage = 0.2,verbose = F,n.cores=1)
gbm.tune.error[h]<-min(gbm.fit$valid.error)
}
for (h in 1:5){
if(verbose>1){cat("|",sep="")}
tune.model<-randomForest::randomForest(x=gbm.tune[which(!is.na(gbm.tune.error)),],y=gbm.tune.error[!is.na(gbm.tune.error)],ntree=500,importance=F)
full.error.preds<-predict(tune.model,newdata = gbm.tune)
full.error.preds[which(!is.na(gbm.tune.error))]<-NA
next.index<-which.min(full.error.preds)
gbm.fit<-gbm::gbm(Y~.,data = gbmdata,distribution = "gaussian",train.fraction = 0.8
,interaction.depth = gbm.tune$depth[next.index],bag.fraction =gbm.tune$bag.fraction[next.index],
n.minobsinnode = gbm.tune$minobs[next.index],n.trees = 50,shrinkage = 0.2,verbose = F,n.cores=1)
gbm.tune.error[next.index]<-min(gbm.fit$valid.error)
}
opt.params<-gbm.tune[which.min(gbm.tune.error),]
gbm.cores<-min(n.cores,5)
gbm.fit<-gbm::gbm(Y~.,data = gbmdata,cv.folds = 5,distribution = "gaussian",interaction.depth = opt.params$depth,n.minobsinnode = opt.params$minobs,
n.trees = gbm.ntrees,shrinkage = 0.03,verbose = F,n.cores = gbm.cores)
opt.tree<-gbm::gbm.perf(gbm.fit,plot.it = F,method = "cv")
doParallel::stopImplicitCluster()
if(verbose>1){print(paste("GBM opt run tree no. =",opt.tree))}
all.STmod.out.of.test.fold.preds[,"GBM"]<-gbm::predict.gbm(gbm.fit,n.trees = opt.tree,newdata = as.data.frame(Genos[rownames(all.STmod.out.of.test.fold.preds),]))
if(verbose>1){print("running GBM")}
if(verbose>1){print(Sys.time()-start)}
}
#LASSO----
if("LASSO"%in%base.models){
start<-Sys.time()
X<-as.matrix(Genos[rownames(Phenos)[-test.folds[[i]]],])[!is.na(Phenos[-test.folds[[i]],t]),]
cv.fit<-glmnet::cv.glmnet(x=X,y=Phenos[rownames(X),t],nfolds = 8,lambda = seq(0.000001,0.9,length.out=50)^4)
lasso.fit<-glmnet::glmnet(x=X,y=Phenos[rownames(X),t],lambda = cv.fit$lambda.min,alpha = 1)
all.STmod.out.of.test.fold.preds[,"LASSO"]<-predict(lasso.fit,newx = as.matrix(Genos[rownames(all.STmod.out.of.test.fold.preds),]))
if(verbose>1){print("running LASSO")}
if(verbose>1){print(Sys.time()-start)}
}
#RKHS----
if("RKHS"%in%base.models){
start<-Sys.time()
Phenos.na<-Phenos
Phenos.na<-Phenos.na[!is.na(Phenos.na[,t]),] #Remove NA rows
Phenos.na[rownames(Phenos)[test.folds[[i]]],]<-NA #Make test folds genos NA
D<-as.matrix(dist(Genos[rownames(Phenos.na),],method="euclidean"))^2 #Compute Gaussian kernel
D<-D/mean(D)
h<-0.5*c(1/5,1,5)
ETA<-list(list(K=exp(-h[1]*D),model='RKHS'),
list(K=exp(-h[2]*D),model='RKHS'),
list(K=exp(-h[3]*D),model='RKHS'))
Phenos.na<-Phenos.na[rownames(D),]
fm<-BGLR::BGLR(y =Phenos.na[,t],ETA = ETA,nIter=5000,burnIn=1000,df0=5,S0=2,verbose = F,saveAt = bglr.saveAt)
fm.preds<-fm$yHat
names(fm.preds)<-rownames(D)
all.STmod.out.of.test.fold.preds[,"RKHS"]<-fm.preds[rownames(all.STmod.out.of.test.fold.preds)]
if(verbose>1){print("running RKHS")}
if(verbose>1){print(Sys.time()-start)}
}
}
if(verbose>1){print("Correlations among out-of-test-fold predictions:")}
if(verbose>1){print(round(cor(all.STmod.out.of.test.fold.preds),2))}
all.trait.out.of.test.fold.preds[[t]]<-all.STmod.out.of.test.fold.preds
} #End of traits loop
#MT model ensembles----
if(verbose>0){print(paste("=============MT ensemble training for test fold",i," CV round",r,"================"))}
X<-matrix(unlist(all.trait.out.of.valid.fold.preds),
nrow = nrow(all.trait.out.of.valid.fold.preds[[1]]),
ncol=length(base.models)*length(traits),
byrow = F,dimnames = list(rownames(all.trait.out.of.valid.fold.preds[[1]]),
paste(expand.grid(base.models,traits)[,1],
expand.grid(base.models,traits)[,2])[1:(length(all.trait.out.of.valid.fold.preds)*length(base.models))]))
newX<-matrix(unlist(all.trait.out.of.test.fold.preds),
nrow = nrow(all.trait.out.of.test.fold.preds[[1]]),
ncol=length(base.models)*length(traits),
byrow = F,dimnames = list(rownames(all.trait.out.of.test.fold.preds[[1]]),
paste(expand.grid(base.models,traits)[,1],
expand.grid(base.models,traits)[,2])[1:(length(all.trait.out.of.test.fold.preds)*length(base.models))]))
for (t in 1:length(traits)) {
if(verbose>1){print(paste("GA optimisation for",traits[t]))}
Y<-Phenos[rownames(X),t]
Y<-Phenos[rownames(X),t]
fitness <- function(params) {
xsubsub<-X[!is.na(Y),]
ysubsub<-Y[!is.na(Y)]
rfcvs<-split(sample(c(1:nrow(xsubsub))),1:8)
cv.preds<-c()
for(cv in 1:length(rfcvs)){
rfmod<-ranger::ranger(x=xsubsub[-rfcvs[[cv]],],y=ysubsub[-rfcvs[[cv]]],num.tree=300,mtry = floor(ncol(xsubsub)*params[1])
,min.node.size = floor(params[2]),oob.error = F)
cv.preds[rfcvs[[cv]]]<-predict(rfmod,data=xsubsub[rfcvs[[cv]],])$predictions
}
cor(cv.preds,ysubsub)
}
GA <- GA::ga("real-valued",lower = c(0.05,2),upper = c(0.95,floor(nrow(X)*0.2)),
fitness = fitness, maxiter = 20,keepBest = T,popSize = 10,elitism = 5,
parallel = n.cores,monitor = F)
opt.params<- GA@solution
rf.fit<-ranger::ranger(x=X[!is.na(Y),],y=Y[!is.na(Y)],num.tree=400,max.depth=NULL
,min.node.size=floor(opt.params[1,2]),mtry = floor(ncol(X)*opt.params[1,1]),oob.error = F)
MTens.prediction<-predict(rf.fit,data=newX)$predictions
names(MTens.prediction)<-row.names(newX)
all.trait.out.of.test.fold.preds[[t]]<-cbind(all.trait.out.of.test.fold.preds[[t]],"MT ensemble"=MTens.prediction)
if(verbose>1){print(paste("Test fold",i,"prediction accuracy:"))}
if(verbose>1){print(round(apply(all.trait.out.of.test.fold.preds[[t]],2,function(x) cor(x,Phenos[names(x),t],use="pairwise.complete.obs")),3))}
} #End of traits loop
all.out.of.fold.preds[[i]]<-all.trait.out.of.test.fold.preds
if(verbose>1){print(paste("===========FINISHED test fold",i," CV round",r,"==========="))}
}
all.CV.rounds[[r]]<-all.out.of.fold.preds
if(verbose>1){print(paste("===========FINISHED CV round",r,"==========="))}
}
}}}}}}}}}}}}}
)))))))))))
library(MTensGS)
data(TGdata)
QCd.markers<-marker.QC(marker.mat = TGgenos)
library(MTensGS)
library(MTensGS)
data(TGdata)
MTens.CV.results<-CV.MTens(Genos = QCd.markers,Phenos = TGphenos
,base.models = c("rrblup","LASSO")
,n.CV.rounds = 1,n.valid.rounds=1)
library(MTensGS)
detach("package:MTensGS", unload = TRUE)
library(MTensGS)
old.genos<-QCd.markers[1:300,]
new.genos<-QCd.markers[301:376,]
old.phens<-phenos[1:300,]
old.phens<-TGphenos[1:300,]
New.Genos = new.genos,
new_preds<-Train.Predict.MTens(Genos.train = old.genos,
New.Genos = new.genos,
Phenos = old.phens,
n.valid.rounds = 1,
n.valid.folds = 6,
base.models = c("rrblup","LASSO"))
new_preds
sel.ind<-MT.PCSI.plot(new_preds,SI.traits = c("YLD_GBR_2011","YLD_GBR_2010","PROT")
,weights = c(1,1,2),cex1 = 0.8)
sel.ind
sel.ind<-MT.PCSI.plot(new_preds,SI.traits = c("YLD_GBR_2011","YLD_GBR_2010","YLD_DEU_2010,"PROT")
,weights = c(1,1,2),cex1 = 0.8)
sel.ind<-MT.PCSI.plot(new_preds,SI.traits = c("YLD_GBR_2011","YLD_GBR_2010","YLD_DEU_2010","PROT")
,weights = c(1,1,2),cex1 = 0.8)
sel.ind<-MT.PCSI.plot(new_preds,SI.traits = c("YLD_GBR_2011","YLD_GBR_2010","YLD_DEU_2010","PROT")
,weights = c(1,1,1,2),cex1 = 0.8)
library(MTensGS)
GA <- GA::ga("real-valued",lower = c(0.05,2),upper = c(0.95,floor(nrow(X)*0.2)),
fitness = fitness, maxiter = 20,keepBest = T,popSize = 10,elitism = 5,
parallel = n.cores,monitor = F)
library(GA)
one-dimensional function
f <- function(x)  abs(x)+cos(x)
curve(f, -20, 20)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20, upper = 20)
summary(GA)
plot(GA)
curve(f, -20, 20)
plot(GA)
curve(f, -20, 20)
abline(v = GA@solution, lty = 3)
# 2) one-dimensional function
f <- function(x)  (x^2+x)*cos(x) # -10 < x < 10
curve(f, -10, 10)
# write your own tracing function
monitor <- function(obj)
{
curve(f, -10, 10, main = paste("iteration =", obj@iter))
points(obj@population, obj@fitness, pch = 20, col = 2)
rug(obj@population, col = 2)
Sys.sleep(0.2)
}
## Not run:
GA <- ga(type = "real-valued", fitness = f, lower = -10, upper = 10, monitor = monitor)
## End(Not run)
# or if you want to suppress the tracing
GA <- ga(type = "real-valued", fitness = f, lower = -10, upper = 10, monitor = NULL)
summary(GA)
monitor(GA)
abline(v = GA@solution, lty = 3)
Rastrigin <- function(x1, x2)
{
20 + x1^2 + x2^2 - 10*(cos(2*pi*x1) + cos(2*pi*x2))
}
x1 <- x2 <- seq(-5.12, 5.12, by = 0.1)
f <- outer(x1, x2, Rastrigin)
persp3D(x1, x2, f, theta = 50, phi = 20, col.palette = bl2gr.colors)
}
))
Rastrigin <- function(x1, x2)
{
20 + x1^2 + x2^2 - 10*(cos(2*pi*x1) + cos(2*pi*x2))
}
x1 <- x2 <- seq(-5.12, 5.12, by = 0.1)
f <- outer(x1, x2, Rastrigin)
persp3D(x1, x2, f, theta = 50, phi = 20, col.palette = bl2gr.colors)
filled.contour(x1, x2, f, color.palette = bl2gr.colors)
persp3D(x1, x2, f, theta = 50, phi = 20, col.palette = bl2gr.colors)
GA <- ga(type = "real-valued", fitness =  function(x) -Rastrigin(x[1], x[2]),
lower = c(-5.12, -5.12), upper = c(5.12, 5.12),
popSize = 50, maxiter = 100)
GA <- ga(type = "real-valued", fitness =  function(x) -Rastrigin(x[1], x[2]),
lower = c(-5.12, -5.12), upper = c(5.12, 5.12),monitor = plot,
popSize = 50, maxiter = 100)
dim(TGgenos)
colnames(TGphenos)
